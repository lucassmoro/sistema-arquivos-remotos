// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sistema_arquivos.proto

package sistemaarquivos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SistemaArquivos_Abre_FullMethodName                 = "/sistemaarquivos.SistemaArquivos/Abre"
	SistemaArquivos_Le_FullMethodName                   = "/sistemaarquivos.SistemaArquivos/Le"
	SistemaArquivos_Escreve_FullMethodName              = "/sistemaarquivos.SistemaArquivos/Escreve"
	SistemaArquivos_Fecha_FullMethodName                = "/sistemaarquivos.SistemaArquivos/Fecha"
	SistemaArquivos_RegistrarNotificacao_FullMethodName = "/sistemaarquivos.SistemaArquivos/RegistrarNotificacao"
)

// SistemaArquivosClient is the client API for SistemaArquivos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SistemaArquivosClient interface {
	Abre(ctx context.Context, in *AbreRequest, opts ...grpc.CallOption) (*AbreReply, error)
	Le(ctx context.Context, in *LeRequest, opts ...grpc.CallOption) (*LeReply, error)
	Escreve(ctx context.Context, in *EscreveRequest, opts ...grpc.CallOption) (*EscreveReply, error)
	Fecha(ctx context.Context, in *FechaRequest, opts ...grpc.CallOption) (*FechaReply, error)
	RegistrarNotificacao(ctx context.Context, in *NotificacaoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificacaoReply], error)
}

type sistemaArquivosClient struct {
	cc grpc.ClientConnInterface
}

func NewSistemaArquivosClient(cc grpc.ClientConnInterface) SistemaArquivosClient {
	return &sistemaArquivosClient{cc}
}

func (c *sistemaArquivosClient) Abre(ctx context.Context, in *AbreRequest, opts ...grpc.CallOption) (*AbreReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbreReply)
	err := c.cc.Invoke(ctx, SistemaArquivos_Abre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sistemaArquivosClient) Le(ctx context.Context, in *LeRequest, opts ...grpc.CallOption) (*LeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeReply)
	err := c.cc.Invoke(ctx, SistemaArquivos_Le_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sistemaArquivosClient) Escreve(ctx context.Context, in *EscreveRequest, opts ...grpc.CallOption) (*EscreveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EscreveReply)
	err := c.cc.Invoke(ctx, SistemaArquivos_Escreve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sistemaArquivosClient) Fecha(ctx context.Context, in *FechaRequest, opts ...grpc.CallOption) (*FechaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FechaReply)
	err := c.cc.Invoke(ctx, SistemaArquivos_Fecha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sistemaArquivosClient) RegistrarNotificacao(ctx context.Context, in *NotificacaoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificacaoReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SistemaArquivos_ServiceDesc.Streams[0], SistemaArquivos_RegistrarNotificacao_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificacaoRequest, NotificacaoReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SistemaArquivos_RegistrarNotificacaoClient = grpc.ServerStreamingClient[NotificacaoReply]

// SistemaArquivosServer is the server API for SistemaArquivos service.
// All implementations must embed UnimplementedSistemaArquivosServer
// for forward compatibility.
type SistemaArquivosServer interface {
	Abre(context.Context, *AbreRequest) (*AbreReply, error)
	Le(context.Context, *LeRequest) (*LeReply, error)
	Escreve(context.Context, *EscreveRequest) (*EscreveReply, error)
	Fecha(context.Context, *FechaRequest) (*FechaReply, error)
	RegistrarNotificacao(*NotificacaoRequest, grpc.ServerStreamingServer[NotificacaoReply]) error
	mustEmbedUnimplementedSistemaArquivosServer()
}

// UnimplementedSistemaArquivosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSistemaArquivosServer struct{}

func (UnimplementedSistemaArquivosServer) Abre(context.Context, *AbreRequest) (*AbreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abre not implemented")
}
func (UnimplementedSistemaArquivosServer) Le(context.Context, *LeRequest) (*LeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Le not implemented")
}
func (UnimplementedSistemaArquivosServer) Escreve(context.Context, *EscreveRequest) (*EscreveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escreve not implemented")
}
func (UnimplementedSistemaArquivosServer) Fecha(context.Context, *FechaRequest) (*FechaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fecha not implemented")
}
func (UnimplementedSistemaArquivosServer) RegistrarNotificacao(*NotificacaoRequest, grpc.ServerStreamingServer[NotificacaoReply]) error {
	return status.Errorf(codes.Unimplemented, "method RegistrarNotificacao not implemented")
}
func (UnimplementedSistemaArquivosServer) mustEmbedUnimplementedSistemaArquivosServer() {}
func (UnimplementedSistemaArquivosServer) testEmbeddedByValue()                         {}

// UnsafeSistemaArquivosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SistemaArquivosServer will
// result in compilation errors.
type UnsafeSistemaArquivosServer interface {
	mustEmbedUnimplementedSistemaArquivosServer()
}

func RegisterSistemaArquivosServer(s grpc.ServiceRegistrar, srv SistemaArquivosServer) {
	// If the following call pancis, it indicates UnimplementedSistemaArquivosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SistemaArquivos_ServiceDesc, srv)
}

func _SistemaArquivos_Abre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SistemaArquivosServer).Abre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SistemaArquivos_Abre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SistemaArquivosServer).Abre(ctx, req.(*AbreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SistemaArquivos_Le_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SistemaArquivosServer).Le(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SistemaArquivos_Le_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SistemaArquivosServer).Le(ctx, req.(*LeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SistemaArquivos_Escreve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscreveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SistemaArquivosServer).Escreve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SistemaArquivos_Escreve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SistemaArquivosServer).Escreve(ctx, req.(*EscreveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SistemaArquivos_Fecha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FechaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SistemaArquivosServer).Fecha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SistemaArquivos_Fecha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SistemaArquivosServer).Fecha(ctx, req.(*FechaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SistemaArquivos_RegistrarNotificacao_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificacaoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SistemaArquivosServer).RegistrarNotificacao(m, &grpc.GenericServerStream[NotificacaoRequest, NotificacaoReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SistemaArquivos_RegistrarNotificacaoServer = grpc.ServerStreamingServer[NotificacaoReply]

// SistemaArquivos_ServiceDesc is the grpc.ServiceDesc for SistemaArquivos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SistemaArquivos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistemaarquivos.SistemaArquivos",
	HandlerType: (*SistemaArquivosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Abre",
			Handler:    _SistemaArquivos_Abre_Handler,
		},
		{
			MethodName: "Le",
			Handler:    _SistemaArquivos_Le_Handler,
		},
		{
			MethodName: "Escreve",
			Handler:    _SistemaArquivos_Escreve_Handler,
		},
		{
			MethodName: "Fecha",
			Handler:    _SistemaArquivos_Fecha_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegistrarNotificacao",
			Handler:       _SistemaArquivos_RegistrarNotificacao_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sistema_arquivos.proto",
}
