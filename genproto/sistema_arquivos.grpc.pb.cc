// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sistema_arquivos.proto

#include "sistema_arquivos.pb.h"
#include "sistema_arquivos.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace sistemaarquivos {

static const char* SistemaArquivos_method_names[] = {
  "/sistemaarquivos.SistemaArquivos/Abre",
  "/sistemaarquivos.SistemaArquivos/Le",
  "/sistemaarquivos.SistemaArquivos/Escreve",
  "/sistemaarquivos.SistemaArquivos/Fecha",
};

std::unique_ptr< SistemaArquivos::Stub> SistemaArquivos::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SistemaArquivos::Stub> stub(new SistemaArquivos::Stub(channel, options));
  return stub;
}

SistemaArquivos::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Abre_(SistemaArquivos_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Le_(SistemaArquivos_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Escreve_(SistemaArquivos_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Fecha_(SistemaArquivos_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SistemaArquivos::Stub::Abre(::grpc::ClientContext* context, const ::sistemaarquivos::AbreRequest& request, ::sistemaarquivos::AbreReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sistemaarquivos::AbreRequest, ::sistemaarquivos::AbreReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Abre_, context, request, response);
}

void SistemaArquivos::Stub::async::Abre(::grpc::ClientContext* context, const ::sistemaarquivos::AbreRequest* request, ::sistemaarquivos::AbreReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sistemaarquivos::AbreRequest, ::sistemaarquivos::AbreReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Abre_, context, request, response, std::move(f));
}

void SistemaArquivos::Stub::async::Abre(::grpc::ClientContext* context, const ::sistemaarquivos::AbreRequest* request, ::sistemaarquivos::AbreReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Abre_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::AbreReply>* SistemaArquivos::Stub::PrepareAsyncAbreRaw(::grpc::ClientContext* context, const ::sistemaarquivos::AbreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sistemaarquivos::AbreReply, ::sistemaarquivos::AbreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Abre_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::AbreReply>* SistemaArquivos::Stub::AsyncAbreRaw(::grpc::ClientContext* context, const ::sistemaarquivos::AbreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAbreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SistemaArquivos::Stub::Le(::grpc::ClientContext* context, const ::sistemaarquivos::LeRequest& request, ::sistemaarquivos::LeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sistemaarquivos::LeRequest, ::sistemaarquivos::LeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Le_, context, request, response);
}

void SistemaArquivos::Stub::async::Le(::grpc::ClientContext* context, const ::sistemaarquivos::LeRequest* request, ::sistemaarquivos::LeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sistemaarquivos::LeRequest, ::sistemaarquivos::LeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Le_, context, request, response, std::move(f));
}

void SistemaArquivos::Stub::async::Le(::grpc::ClientContext* context, const ::sistemaarquivos::LeRequest* request, ::sistemaarquivos::LeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Le_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::LeReply>* SistemaArquivos::Stub::PrepareAsyncLeRaw(::grpc::ClientContext* context, const ::sistemaarquivos::LeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sistemaarquivos::LeReply, ::sistemaarquivos::LeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Le_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::LeReply>* SistemaArquivos::Stub::AsyncLeRaw(::grpc::ClientContext* context, const ::sistemaarquivos::LeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SistemaArquivos::Stub::Escreve(::grpc::ClientContext* context, const ::sistemaarquivos::EscreveRequest& request, ::sistemaarquivos::EscreveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sistemaarquivos::EscreveRequest, ::sistemaarquivos::EscreveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Escreve_, context, request, response);
}

void SistemaArquivos::Stub::async::Escreve(::grpc::ClientContext* context, const ::sistemaarquivos::EscreveRequest* request, ::sistemaarquivos::EscreveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sistemaarquivos::EscreveRequest, ::sistemaarquivos::EscreveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Escreve_, context, request, response, std::move(f));
}

void SistemaArquivos::Stub::async::Escreve(::grpc::ClientContext* context, const ::sistemaarquivos::EscreveRequest* request, ::sistemaarquivos::EscreveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Escreve_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::EscreveReply>* SistemaArquivos::Stub::PrepareAsyncEscreveRaw(::grpc::ClientContext* context, const ::sistemaarquivos::EscreveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sistemaarquivos::EscreveReply, ::sistemaarquivos::EscreveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Escreve_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::EscreveReply>* SistemaArquivos::Stub::AsyncEscreveRaw(::grpc::ClientContext* context, const ::sistemaarquivos::EscreveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEscreveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SistemaArquivos::Stub::Fecha(::grpc::ClientContext* context, const ::sistemaarquivos::FechaRequest& request, ::sistemaarquivos::FechaReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sistemaarquivos::FechaRequest, ::sistemaarquivos::FechaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Fecha_, context, request, response);
}

void SistemaArquivos::Stub::async::Fecha(::grpc::ClientContext* context, const ::sistemaarquivos::FechaRequest* request, ::sistemaarquivos::FechaReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sistemaarquivos::FechaRequest, ::sistemaarquivos::FechaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fecha_, context, request, response, std::move(f));
}

void SistemaArquivos::Stub::async::Fecha(::grpc::ClientContext* context, const ::sistemaarquivos::FechaRequest* request, ::sistemaarquivos::FechaReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fecha_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::FechaReply>* SistemaArquivos::Stub::PrepareAsyncFechaRaw(::grpc::ClientContext* context, const ::sistemaarquivos::FechaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sistemaarquivos::FechaReply, ::sistemaarquivos::FechaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Fecha_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sistemaarquivos::FechaReply>* SistemaArquivos::Stub::AsyncFechaRaw(::grpc::ClientContext* context, const ::sistemaarquivos::FechaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFechaRaw(context, request, cq);
  result->StartCall();
  return result;
}

SistemaArquivos::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SistemaArquivos_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SistemaArquivos::Service, ::sistemaarquivos::AbreRequest, ::sistemaarquivos::AbreReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SistemaArquivos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sistemaarquivos::AbreRequest* req,
             ::sistemaarquivos::AbreReply* resp) {
               return service->Abre(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SistemaArquivos_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SistemaArquivos::Service, ::sistemaarquivos::LeRequest, ::sistemaarquivos::LeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SistemaArquivos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sistemaarquivos::LeRequest* req,
             ::sistemaarquivos::LeReply* resp) {
               return service->Le(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SistemaArquivos_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SistemaArquivos::Service, ::sistemaarquivos::EscreveRequest, ::sistemaarquivos::EscreveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SistemaArquivos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sistemaarquivos::EscreveRequest* req,
             ::sistemaarquivos::EscreveReply* resp) {
               return service->Escreve(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SistemaArquivos_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SistemaArquivos::Service, ::sistemaarquivos::FechaRequest, ::sistemaarquivos::FechaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SistemaArquivos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sistemaarquivos::FechaRequest* req,
             ::sistemaarquivos::FechaReply* resp) {
               return service->Fecha(ctx, req, resp);
             }, this)));
}

SistemaArquivos::Service::~Service() {
}

::grpc::Status SistemaArquivos::Service::Abre(::grpc::ServerContext* context, const ::sistemaarquivos::AbreRequest* request, ::sistemaarquivos::AbreReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SistemaArquivos::Service::Le(::grpc::ServerContext* context, const ::sistemaarquivos::LeRequest* request, ::sistemaarquivos::LeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SistemaArquivos::Service::Escreve(::grpc::ServerContext* context, const ::sistemaarquivos::EscreveRequest* request, ::sistemaarquivos::EscreveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SistemaArquivos::Service::Fecha(::grpc::ServerContext* context, const ::sistemaarquivos::FechaRequest* request, ::sistemaarquivos::FechaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sistemaarquivos
#include <grpcpp/ports_undef.inc>

